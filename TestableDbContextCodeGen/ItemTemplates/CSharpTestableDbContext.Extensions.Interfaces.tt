<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".txt"#><#

var loader = new MetadataLoader(this);
var inputFile = @"..\$edmxInputFile$";
var ItemCollection = loader.CreateEdmItemCollection(inputFile);

Code = new CodeGenerationTools(this);
ObjectNamespace = Code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);

fileManager.StartNewFile("IDbSetExtensions.cs");

BeginNamespace(ObjectNamespace);

#>
using System.Collections.Generic;
using System.Data.Entity;

public interface IDbSetExtensions
{
    IEnumerable<TEntity> SqlQuery<TEntity>(IDbSet<TEntity> set, string sql, params object[] parameters)
        where TEntity : class;
}
<#

EndNamespace(ObjectNamespace);

fileManager.StartNewFile("IEnumerableExtensions.cs");

BeginNamespace(ObjectNamespace);

#>
using System.Collections.Generic;

public interface IEnumerableExtensions
{
    IEnumerable<TEntity> AsNoTracking<TEntity>(IEnumerable<TEntity> sqlQuery)
        where TEntity : class;
}
<#

EndNamespace(ObjectNamespace);

fileManager.StartNewFile("IOrderedQueryableExtensions.cs");

BeginNamespace(ObjectNamespace);

#>
using System.Linq;

public interface IOrderedQueryableExtensions
{
    IOrderedQueryable<TEntity> AsNoTracking<TEntity>(IOrderedQueryable<TEntity> query);
    IOrderedQueryable<TEntity> Include<TEntity>(IOrderedQueryable<TEntity> query, string path);
}
<#

EndNamespace(ObjectNamespace);

fileManager.StartNewFile("IQueryableExtensions.cs");

BeginNamespace(ObjectNamespace);

#>
using System.Linq;

public interface IQueryableExtensions
{
    IQueryable<TEntity> AsNoTracking<TEntity>(IQueryable<TEntity> query);
    IQueryable<TEntity> Include<TEntity>(IQueryable<TEntity> query, string path);
}
<#

EndNamespace(ObjectNamespace);

fileManager.Process();

#>
<#+
string ObjectNamespace { get; set; }
CodeGenerationTools Code { get; set; }

string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;

void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=Code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

#>
